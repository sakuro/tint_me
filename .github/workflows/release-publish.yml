name: Release Publish

# This workflow handles the actual gem publishing after PR merge.
# Most validations are already performed by the Release Validation workflow.

env:
  GEM_NAME: ${{ github.event.repository.name }}

on:
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  publish-release:
    if: github.event.pull_request.merged == true && startsWith(github.head_ref, 'release-v')
    runs-on: ubuntu-latest
    permissions:
      contents: write      # Required for GitHub Release creation and branch deletion

    steps:
    - name: Extract version from branch name
      id: version
      run: |
        BRANCH_NAME="${{ github.head_ref }}"
        VERSION=${BRANCH_NAME#release-v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$VERSION" >> $GITHUB_OUTPUT

    - name: Checkout release tag
      uses: actions/checkout@v5
      with:
        ref: ${{ steps.version.outputs.tag }}
        fetch-depth: 0

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.4'
        bundler-cache: true

    - name: Verify version consistency
      run: |
        # Check if version in file matches branch
        FILE_VERSION=$(grep 'VERSION = ' lib/${{ env.GEM_NAME }}/version.rb | sed 's/.*VERSION = "\(.*\)".*/\1/')
        if [ "$FILE_VERSION" != "${{ steps.version.outputs.version }}" ]; then
          echo "❌ Error: Version mismatch. File: $FILE_VERSION, Expected: ${{ steps.version.outputs.version }}"
          exit 1
        fi

    - name: Setup RubyGems credentials
      env:
        GEM_HOST_API_KEY: ${{ secrets.RUBYGEMS_API_KEY }}
      run: |
        mkdir -p ~/.gem
        touch ~/.gem/credentials
        chmod 600 ~/.gem/credentials
        cat > ~/.gem/credentials << EOF
        ---
        :rubygems_api_key: ${{ secrets.RUBYGEMS_API_KEY }}
        EOF

    - name: Set git user
      uses: git-actions/set-user@v1

    - name: Build gem
      run: |
        bundle exec rake build

    - name: Push gem to RubyGems
      run: |
        gem push pkg/${{ env.GEM_NAME }}-${{ steps.version.outputs.version }}.gem

    - name: Extract changelog for this version
      id: changelog
      run: |
        # Extract changelog content for this version
        CHANGELOG=$(sed -n '/^## \[${{ steps.version.outputs.version }}\]/{:a; n; /^## \[/q; /^$/!p; ba}' CHANGELOG.md)

        # Save to file for GitHub release
        echo "$CHANGELOG" > release_notes.md

        # Also output for use in other steps
        echo "content<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Create release with changelog and gem file
        gh release create ${{ steps.version.outputs.tag }} \
          --title "${{ env.GEM_NAME }} ${{ steps.version.outputs.tag }}" \
          --notes-file release_notes.md \
          pkg/${{ env.GEM_NAME }}-${{ steps.version.outputs.version }}.gem

    - name: Cleanup release branch
      run: |
        git push origin --delete release-v${{ steps.version.outputs.version }}
      continue-on-error: true

    - name: Post-release summary
      run: |
        echo "🎉 Release ${{ steps.version.outputs.tag }} published successfully!"
        echo "- Using git tag created on release branch"
        echo "- Gem built from tagged commit and published to RubyGems"
        echo "- GitHub release created with assets"
        echo "- Release branch cleaned up"
