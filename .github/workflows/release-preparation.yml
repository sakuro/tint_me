name: Release Preparation

# This workflow only handles file updates for release preparation.
# All validations are performed by the Release Validation workflow on PR creation.

env:
  GEM_NAME: ${{ github.event.repository.name }}

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string

jobs:
  create-release-branch:
    runs-on: ubuntu-latest
    permissions:
      contents: write       # Required for git push (branch and tag creation)
      pull-requests: write  # Required for PR creation

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Set git user
      uses: git-actions/set-user@v1

    - name: Create release branch
      run: |
        git checkout -b release-v${{ github.event.inputs.version }}

    - name: Update version file
      run: |
        sed -i "s/VERSION = \".*\"/VERSION = \"${{ github.event.inputs.version }}\"/" lib/${{ env.GEM_NAME }}/version.rb

    - name: Update CHANGELOG.md
      run: |
        # Get current date in UTC (GitHub Actions runs in UTC timezone)
        RELEASE_DATE=$(date -u +%Y-%m-%d)

        # Update changelog
        sed -i "s/## \[Unreleased\]/## [${{ github.event.inputs.version }}] - $RELEASE_DATE/" CHANGELOG.md

        # Add new unreleased section
        sed -i "/## \[${{ github.event.inputs.version }}\]/i## [Unreleased]\n" CHANGELOG.md

    - name: Commit changes
      run: |
        git add lib/${{ env.GEM_NAME }}/version.rb CHANGELOG.md
        git commit -m "$(cat <<'EOF'
        :bookmark: Prepare release v${{ github.event.inputs.version }}

        - Update VERSION constant to ${{ github.event.inputs.version }}
        - Update CHANGELOG.md for release
        - Add new unreleased section for future changes
        EOF
        )"

    - name: Create release tag
      run: |
        git tag -a "v${{ github.event.inputs.version }}" \
          -m "Release v${{ github.event.inputs.version }}"

    - name: Push release branch and tag
      run: |
        git push -u origin release-v${{ github.event.inputs.version }}
        git push origin v${{ github.event.inputs.version }}

    - name: Create Pull Request
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh pr create \
          --title ":bookmark: Release v${{ github.event.inputs.version }}" \
          --body "$(cat <<'EOF'
        ## Summary

        Prepare for release v${{ github.event.inputs.version }}

        ## Changes

        - Update VERSION constant to ${{ github.event.inputs.version }}
        - Update CHANGELOG.md with release date
        - Add new unreleased section for future development

        ## Quality Checks

        - [x] RuboCop checks passed
        - [x] All tests passed
        - [x] Version format validated
        - [x] CHANGELOG.md updated

        ## Release Requirements Checklist

        Before merging this PR, ensure the following requirements are met:

        ### GitHub Repository Settings
        - [ ] **Workflow permissions**: Set to "Read repository contents and packages permissions"
        - [ ] **Pull request permissions**: "Allow GitHub Actions to create and approve pull requests" enabled
        - [ ] Configure at: https://github.com/${{ github.repository }}/settings/actions

        ### Required Secrets
        - [ ] **RUBYGEMS_API_KEY**: RubyGems.org API key for gem publishing
        - [ ] Configure at: https://github.com/${{ github.repository }}/settings/secrets/actions
        - [ ] Generate API key at: https://rubygems.org/profile/api_keys (requires password confirmation)
        - [ ] API key scopes: Enable "Push rubygem" and "Yank rubygem"
        - [ ] API key security: Enable "Enable MFA"
        - [ ] Gem scope: Start with "All Gems", restrict to `${{ env.GEM_NAME }}` after first release

        ### RubyGems.org Setup
        - [ ] **Gem name availability**: Verify `${{ env.GEM_NAME }}` is available or owned by you (first release only)
        - [ ] **Account verified**: RubyGems.org account email verified and MFA enabled (recommended)
        - [ ] Configure MFA at: https://rubygems.org/profile/edit
        - [ ] Set Authentication Levels to "UI and gem signin" (enables MFA while allowing CI/CD)
        - [ ] **Note**: Do not use "UI and API" as it breaks automated CI/CD workflows
        - [ ] MFA setup guide: https://guides.rubygems.org/setting-up-multifactor-authentication/

        ## Post-Merge Actions

        After merging this PR, the release workflow will automatically:
        - Use the git tag v${{ github.event.inputs.version }} (already created on this branch)
        - Build and publish gem to RubyGems from the tagged commit
        - Create GitHub release with assets

        EOF
        )"
