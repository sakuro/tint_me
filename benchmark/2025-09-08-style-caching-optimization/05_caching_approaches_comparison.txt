CACHING APPROACH COMPARISON
===========================
Date: 2025-09-08

## Memory Usage Comparison (Style Creation)

### With reset_code caching:
- Simple style: 6.1KB, 58 objects
- Complex style: 7.8KB, 79 objects

### Without reset_code caching:
- Simple style: 6.0KB, 58 objects (-8 bytes)
- Complex style: 7.7KB, 79 objects (-8 bytes)

**Memory savings: ~8 bytes per Style instance (negligible)**

## Performance Comparison (ops/second)

### Style Application Performance:
| Style Type | With reset_code cache | Without reset_code cache | Difference |
|------------|----------------------|---------------------------|------------|
| Simple     | 5.44M                | 4.43M                     | 18% slower |
| Complex    | 3.83M                | 3.28M                     | 14% slower |
| Hex        | 4.66M                | 3.75M                     | 20% slower |

### Repeated Application (1000x):
| Style Type | With cache | Without cache | Difference |
|------------|------------|---------------|------------|
| Simple     | 6,383      | 4,961         | 22% slower |
| Complex    | 4,294      | 3,553         | 17% slower |
| Hex        | 5,343      | 4,171         | 22% slower |

### Memory Usage Per Application:
| Style Type | With cache | Without cache | Difference |
|------------|------------|---------------|------------|
| Simple     | 424 bytes  | 616 bytes     | +45% more |
| Complex    | 264 bytes  | 264 bytes     | same      |

## Analysis

### Performance Impact:
- **14-22% performance decrease** without reset_code caching
- Simple styles show highest impact (22% slower)
- Memory allocation per call increases for simple styles

### Memory Trade-off:
- **Minimal creation savings**: Only 8 bytes per Style instance
- **Higher runtime cost**: Simple styles use 45% more memory per call
- **Net negative**: More allocations during frequent usage

### Recommendations:

**Keep reset_code caching** because:
1. Negligible memory savings (8 bytes) when removed
2. Significant performance cost (14-22% slower)
3. Increased runtime memory allocations
4. Reset code is a constant string ("\e[0m") - perfect for caching

The reset_code caching provides substantial performance benefits with minimal memory overhead, making it an optimal trade-off for the typical use case of applying styles multiple times.